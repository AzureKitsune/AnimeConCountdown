{"version":3,"sources":["ConventionItem.js","ConventionsGrid.js","App.js","serviceWorker.js","index.js"],"names":["ConventionsItem","props","state","date","website","name","timeLeft","updateTimeLeft","bind","registerForAppTick","convention","this","dateStr","timeDiffMs","Date","diffObj","convertMillisecondsToTimeSpan","diffStr","setState","milliseconds","diff","days","Math","floor","hours","mins","seconds","dateConfirmed","confirmed","classNames","convention-date","className","href","React","Component","ConventionsGrid","conventions","class","map","element","index","apptick","App","tickHandlers","setInterval","Object","entries","func","conName","handler","handlers","fetch","then","res","json","result","error","alert","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ff1f7d8c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ConventionItem.css';\r\n\r\n\r\nclass ConventionsItem extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          date: \"\",\r\n          website: null,\r\n          name: \"Null\",\r\n          timeLeft: \"\"\r\n      };\r\n\r\n      //allows 'this' to refer to the current conventionitem\r\n      this.updateTimeLeft = this.updateTimeLeft.bind(this);\r\n\r\n      //registers our 'updateTimeLeft' function with the upper App instance so that the timer will call it.\r\n      this.props.registerForAppTick(this.props.convention.name, this.updateTimeLeft);\r\n    }\r\n\r\n    updateTimeLeft() {\r\n        //this function updates the display (how much time is left)\r\n        if (this.state != null) {\r\n            var dateStr = this.state.date;\r\n            var date = new Date(dateStr);\r\n            var now = new Date();\r\n            var timeDiffMs = date - now;\r\n            var diffObj = this.convertMillisecondsToTimeSpan(timeDiffMs);\r\n\r\n            var diffStr = diffObj[\"days\"] + \" days, \" + diffObj[\"hours\"] + \" hours, \" + diffObj[\"minutes\"] + \" minutes, \" + diffObj[\"seconds\"] + \" seconds.\";\r\n            this.setState({timeLeft: diffStr});\r\n        }\r\n    }\r\n\r\n    convertMillisecondsToTimeSpan(milliseconds) {\r\n        //based on code from: https://stackoverflow.com/a/14297656\r\n        var diff = milliseconds;\r\n\r\n        var days = Math.floor(diff / (1000 * 60 * 60 * 24));\r\n        diff -=  days * (1000 * 60 * 60 * 24);\r\n\r\n        var hours = Math.floor(diff / (1000 * 60 * 60));\r\n        diff -= hours * (1000 * 60 * 60);\r\n\r\n        var mins = Math.floor(diff / (1000 * 60));\r\n        diff -= mins * (1000 * 60);\r\n\r\n        var seconds = Math.floor(diff / (1000));\r\n        diff -= seconds * (1000);\r\n\r\n        return { \"days\" : days, \"hours\": hours, \"minutes\": mins, \"seconds\": seconds };\r\n    }\r\n\r\n    componentDidMount(props) {\r\n        this.setState({\r\n            date: this.props.convention.date,\r\n            website: this.props.convention.website,\r\n            name: this.props.convention.name,\r\n            dateConfirmed: this.props.convention.confirmed,\r\n            timeLeft: \"\"\r\n        })\r\n    }\r\n\r\n    render(props) {\r\n        var classNames = \"convention-item\";\r\n\r\n        if (this.props.convention.confirmed == \"false\") {\r\n            classNames += \" convention-item-unconfirmed\";\r\n        }\r\n\r\n        return (\r\n            <div convention-date={this.props.convention.date} className={classNames}>\r\n                <h3 className=\"convention-header\"><a href={this.props.convention.website}>{this.props.convention.name}</a></h3>\r\n                <p className=\"convention-timeleft\">{this.state.timeLeft}</p>\r\n\r\n                { this.props.convention.confirmed == \"false\" && \r\n                    <p className=\"convention-unconfirmed-msg\">The date of this convention hasn't been confirmed.</p>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConventionsItem;\r\n","import React from 'react';\r\nimport './ConventionsGrid.css';\r\nimport ConventionItem from \"./ConventionItem.js\";\r\n\r\n//this is the grid that holds the convention blocks (convention item).\r\n\r\nclass ConventionsGrid extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n\r\n    render(props) {\r\n        if (this.props.conventions == null) {\r\n            return (\r\n                <p>There aren't any conventions available at this time.</p>\r\n            );\r\n        } else {\r\n            return (\r\n                <div class=\"conventions-grid\">\r\n                    { this.props.conventions.map((element, index) => {\r\n                    return <ConventionItem convention={element} registerForAppTick={this.props.apptick} />\r\n                    })}\r\n                </div>\r\n            );\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default ConventionsGrid;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ConventionsGrid from \"./ConventionsGrid.js\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      conventions: null,\r\n      tickHandlers: {}\r\n    };\r\n\r\n    //allows the 'registerForAppTick' function to use the 'this' keyword to refer to the current 'App' instance.\r\n    this.registerForAppTick = this.registerForAppTick.bind(this);\r\n\r\n    //sets a timer that calls every conventionitem's update handler every second.\r\n    setInterval(() => {\r\n      for(let [key, func] of Object.entries(this.state.tickHandlers)) {\r\n        //call a conventionitem's update handler (updateTimeLeft function).\r\n        func();\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  registerForAppTick(conName, handler) {\r\n    //this function takes a convention name and its 'update' handler function, which gets called every second.\r\n    var handlers = this.state.tickHandlers;\r\n    handlers[conName] = handler;\r\n    this.setState({tickHandlers: handlers});\r\n  }\r\n\r\n  componentDidMount() {\r\n    //fetch the conventions and parse the json object.\r\n    fetch(\"https://raw.githubusercontent.com/AzureKitsune/AnimeConCountdown/master/data/conventions.json\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          //saves the convention information into this object's state.\r\n          this.setState({conventions: result.conventions});\r\n        },\r\n        (error) => {\r\n          alert(error);\r\n        });\r\n  }\r\n\r\n  render(props) {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1>Anime Convention Countdown (2020-2021)</h1>\r\n          <p>Countdown to late 2020 & early 2021 anime conventions.</p>\r\n        </header>\r\n        <div id=\"main-content\">   \r\n          <ConventionsGrid conventions={this.state.conventions} apptick={this.registerForAppTick} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}